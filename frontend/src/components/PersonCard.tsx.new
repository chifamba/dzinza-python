import React, { useState } from 'react';
import { Person } from '../types';
import { UserCircle } from 'lucide-react';
import { getDefaultImage } from '../utils/defaultImages';

interface PersonCardProps {
  person: Person;
  position?: { x: number, y: number };
  onPositionChange?: (id: string, position: { x: number, y: number }) => void;
  onAddChild?: () => void;
  onEdit?: () => void;
  onSelect?: () => void;
  selected?: boolean;
  onStartConnection?: (personId: string) => void;
}

const PersonCard: React.FC<PersonCardProps> = ({ 
  person, 
  position,
  onPositionChange,
  onAddChild, 
  onEdit, 
  onSelect,
  selected = false,
  onStartConnection
}) => {
  const [isDragging, setIsDragging] = useState(false);
  const [dragOffset, setDragOffset] = useState({ x: 0, y: 0 });

  const handleMouseDown = (e: React.MouseEvent) => {
    // Only start drag if not clicking on a button
    if ((e.target as HTMLElement).tagName !== 'BUTTON') {
      e.stopPropagation();
      setIsDragging(true);
      const rect = (e.currentTarget as HTMLElement).getBoundingClientRect();
      setDragOffset({
        x: e.clientX - rect.left,
        y: e.clientY - rect.top
      });
    }
  };

  const handleMouseMove = (e: React.MouseEvent) => {
    if (isDragging && onPositionChange) {
      e.stopPropagation();
      e.preventDefault();
      onPositionChange(person.id, {
        x: e.clientX - dragOffset.x,
        y: e.clientY - dragOffset.y
      });
    }
  };

  const handleMouseUp = () => {
    setIsDragging(false);
  };

  // Add event listeners to document for mouse movements outside the component
  React.useEffect(() => {
    if (isDragging) {
      const handleGlobalMouseMove = (e: MouseEvent) => {
        if (onPositionChange) {
          onPositionChange(person.id, {
            x: e.clientX - dragOffset.x,
            y: e.clientY - dragOffset.y
          });
        }
      };

      const handleGlobalMouseUp = () => {
        setIsDragging(false);
      };

      document.addEventListener('mousemove', handleGlobalMouseMove);
      document.addEventListener('mouseup', handleGlobalMouseUp);

      return () => {
        document.removeEventListener('mousemove', handleGlobalMouseMove);
        document.removeEventListener('mouseup', handleGlobalMouseUp);
      };
    }
  }, [isDragging, dragOffset, person.id, onPositionChange]);

  const colorClasses = {
    blue: 'bg-sky-100 border-sky-300',
    green: 'bg-lime-100 border-lime-300',
    orange: 'bg-amber-100 border-amber-300',
    pink: 'bg-rose-100 border-rose-300',
  };
  
  const colorClass = person.color ? colorClasses[person.color] : 'bg-gray-100 border-gray-300';
  const displayName = person.name || `${person.firstName || ''} ${person.lastName || ''}`.trim();
  
  // Format display name with maiden name for female persons
  const fullDisplayName = (() => {
    if (person.gender === 'female' && person.maidenName) {
      // Only show abbreviated née format on cards due to space constraints
      return `${person.firstName || ''} ${person.lastName || ''} (née ${person.maidenName})`.trim();
    }
    return displayName;
  })();
  
  const getProfileImage = () => {
    if (person.profilePictureUrl) {
      return person.profilePictureUrl;
    }
    if (person.photo) { // Legacy field as fallback
      return person.photo;
    }
    if (person.category) {
      return getDefaultImage(person.category);
    }
    return `https://via.placeholder.com/40?text=${displayName.charAt(0)}`;
  };

  return (
    <div 
      style={{
        position: 'absolute',
        left: position?.x || 0,
        top: position?.y || 0,
        zIndex: isDragging ? 1000 : 1,
        cursor: isDragging ? 'grabbing' : 'grab'
      }}
      onMouseDown={handleMouseDown}
      onMouseMove={handleMouseMove}
      onMouseUp={handleMouseUp}
      className={`relative w-32 h-16 rounded-md border-2 p-2 transition-all 
        ${colorClass} ${selected ? 'ring-2 ring-offset-2 ring-blue-500' : ''}`}
    >
      <div className="flex items-center space-x-2">
        <div className="relative">
          {person.hasImage || person.category || person.profilePictureUrl ? (
            <div className="w-10 h-10 rounded-full overflow-hidden border border-gray-300">
              <img 
                src={getProfileImage()}
                alt={fullDisplayName}
                className="w-full h-full object-cover"
              />
            </div>
          ) : (
            <UserCircle className="w-10 h-10 text-gray-500" />
          )}
          <span 
            className="absolute bottom-0 right-0 w-3 h-3 bg-white rounded-full flex items-center justify-center cursor-pointer"
            onClick={(e) => { e.stopPropagation(); onEdit?.(); }}
          >
            <span className="text-xs">✏️</span>
          </span>
        </div>
        <div 
          className="flex-1 overflow-hidden"
          onClick={(e) => { e.stopPropagation(); onSelect?.(); }}
        >
          <p className="text-sm font-medium truncate" title={fullDisplayName}>{displayName}</p>
        </div>
      </div>
      
      <div className="absolute top-0 right-0 flex space-x-1 -mt-4 -mr-2">
        {onStartConnection && (
          <button 
            className="w-5 h-5 bg-white rounded-full border border-gray-300 flex items-center justify-center hover:bg-gray-100 transition-colors"
            onClick={(e) => { e.stopPropagation(); onStartConnection(person.id); }}
            title="Create connection"
          >
            <span className="text-xs">↗️</span>
          </button>
        )}
      </div>

      {!person.isPlaceholder && (
        <button 
          className="absolute bottom-0 left-1/2 transform -translate-x-1/2 translate-y-1/2 w-5 h-5 bg-white rounded-full border border-gray-300 flex items-center justify-center hover:bg-gray-100 transition-colors"
          onClick={(e) => { e.stopPropagation(); onAddChild?.(); }}
        >
          <span className="text-xs">+</span>
        </button>
      )}
    </div>
  );
};

export default PersonCard;
