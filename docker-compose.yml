# docker-compose.yml (in project root: dzinza-python/)
x-default-logging: &logging
  driver: "json-file"
  options:
    max-size: "5m"
    max-file: "2"
    tag: "{{.Name}}"
  
services:
  redis:
    image: redis:8.0.1-alpine
    container_name: dzinza-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: [ "CMD", "redis-cli", "--raw", "incr", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s
    restart: unless-stopped
    logging: *logging

  dbservice:
    image: postgres:15-alpine
    container_name: dzinza-db
    ports:
      - "5432:5432"
    command: ["postgres", "-c", "listen_addresses=*", "-c", "logging_collector=on", "-c", "log_statement=all"]
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=dzinza
      - INITIAL_ADMIN_PASSWORD=01Admin_2025
    volumes:
      - db_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $POSTGRES_USER -d $POSTGRES_DB"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s
    restart: unless-stopped
    logging: *logging

  backend:
    build:
      context: .
      dockerfile: backend/Dockerfile
      no_cache: true
    container_name: dzinza-backend
    ports:
      - "8090:8090"
    depends_on:
      dbservice:
        condition: service_healthy
      redis:
        condition: service_healthy
      jaeger:
        condition: service_started
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8090/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=dzinza
      - POSTGRES_HOST=dbservice
      - DATABASE_URL=postgresql+psycopg://postgres:postgres@dbservice:5432/dzinza
      - INITIAL_ADMIN_PASSWORD=01Admin_2025
      - REDIS_URL=redis://redis:6379/0
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://jaeger:4318
      - OTEL_EXPORTER_OTLP_PROTOCOL=grpc
      # Changed from localhost to service name for consistency
      - REACT_APP_API_URL=http://localhost:8090/api
      - FRONTEND_APP_URL=http://localhost:5173
    restart: unless-stopped
    logging: *logging
  
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: dzinza-frontend
    ports:
      - "5173:80"
    depends_on:
      backend:
        condition: service_started
    environment:
      - REACT_APP_API_URL=http://localhost:8090/api
      - FRONTEND_APP_URL=http://localhost:5173
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://jaeger:4318
    restart: unless-stopped
    logging: *logging

  # demo_service:
  #   build:
  #     context: ./demo_service
  #     dockerfile: Dockerfile
  #   container_name: dzinza-demo-service
  #   depends_on:
  #     dbservice:
  #       condition: service_healthy
  #     # backend:
  #     #   condition: service_healthy
  #   environment:
  #     - DATABASE_URL=postgresql://postgres:postgres@dbservice:5432/dzinza
  #     - ENABLE_DEMO_MODE=${ENABLE_DEMO_MODE:-true}
  #   restart: unless-stopped
  #   logging: *logging

  # ********************
  # Telemetry Components
  # ********************
  # Jaeger
  jaeger:
    image: jaegertracing/jaeger:2.6.0
    container_name: jaeger
    deploy:
      resources:
        limits:
          memory: 1200M
    restart: unless-stopped
    ports:
      - "16686:16686"
      - "4317:4317"
      - "4318:4318"
    environment:
      - LOG_LEVEL=error
    logging: *logging

  # Grafana
  grafana:
    image: grafana/grafana:11.5.2
    container_name: grafana
    deploy:
      resources:
        limits:
          memory: 120M
    restart: unless-stopped
    environment:
      - GF_INSTALL_PLUGINS=grafana-opensearch-datasource
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - LOG_LEVEL=error
    volumes:
      - ./otel-config/grafana.ini:/etc/grafana/grafana.ini
      - ./otel-config/graphana-provisioning/:/etc/grafana/provisioning/
    ports:
      - "3000:3000"
    logging: *logging

  # Prometheus
  prometheus:
    image: quay.io/prometheus/prometheus:v3.2.0
    container_name: prometheus
    command:
      - --web.console.templates=/etc/prometheus/consoles
      - --web.console.libraries=/etc/prometheus/console_libraries
      - --storage.tsdb.retention.time=1h
      - --config.file=/etc/prometheus/prometheus-config.yaml
      - --storage.tsdb.path=/prometheus
      - --web.enable-lifecycle
      - --web.route-prefix=/
      - --web.enable-otlp-receiver
      - --enable-feature=exemplar-storage
    volumes:
      - ./otel-config/prometheus-config.yaml:/etc/prometheus/prometheus-config.yaml
    deploy:
      resources:
        limits:
          memory: 300M
    restart: unless-stopped
    ports:
      - "9090:9090"
    logging: *logging
    environment:
      - PROMETHEUS_STORAGE_PATH=/prometheus
      - LOG_LEVEL=error
    ulimits:
      nofile:
        soft: 65536
        hard: 65536

  # OpenSearch
  opensearch:
    image: opensearchproject/opensearch:2.19.0
    container_name: opensearch
    deploy:
      resources:
        limits:
          memory: 1.1G
    restart: unless-stopped
    environment:
     - cluster.name=dzinza-cluster
      - node.name=dzinza-node
      - bootstrap.memory_lock=true
      - discovery.type=single-node
      - OPENSEARCH_JAVA_OPTS=-Xms300m -Xmx300m
      - OPENSEARCH_INITIAL_ADMIN_PASSWORD=01Admin_2025
      - DISABLE_INSTALL_DEMO_CONFIG=true
      - DISABLE_SECURITY_PLUGIN=true
      - _JAVA_OPTIONS=-Xmx300m
      - LOG_LEVEL=error
      - OPENSEARCH_LOGS_BASE_PATH=/tmp
      - logger.org.opensearch=ERROR
      - logger.action=ERROR
      - logger.indices=ERROR
      - logger.transport=ERROR
      - logger.cluster=ERROR
      - logger.cluster.service=ERROR
      - logger.discovery=ERROR
      - logger.gateway=ERROR
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    ports:
      - "9200:9200"
    volumes:
      - ./config/opensearch-log4j2.properties:/usr/share/opensearch/config/log4j2.properties
      - opensearch_data:/usr/share/opensearch/data
    healthcheck:
      test: curl -s http://localhost:9200/_cluster/health | grep -E '"status":"(green|yellow)"'
      start_period: 10s
      interval: 5s
      timeout: 10s
      retries: 10
    logging: *logging


volumes:
  db_data:
    driver: local
    name: "dzinza_db_data"
  redis_data:
    driver: local
    name: "dzinza_redis_data"
  otel-config:
    driver: local
    name: "dzinza_otel_config"
  opensearch_data:
    driver: local
    name: "dzinza_opensearch_data"
